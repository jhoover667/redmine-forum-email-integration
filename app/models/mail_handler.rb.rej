***************
*** 51,60 ****
    private
  
    ISSUE_REPLY_SUBJECT_RE = %r{\[[^\]]+#(\d+)\]}
    
    def dispatch
      if m = email.subject.match(ISSUE_REPLY_SUBJECT_RE)
        receive_issue_update(m[1].to_i)
      else
        receive_issue
      end
--- 51,69 ----
    private
  
    ISSUE_REPLY_SUBJECT_RE = %r{\[[^\]]+#(\d+)\]}
+   FORUM_MESSAGE_SUBJECT = %r{(\[.*)(#.*\])}
+   FORUM_MESSAGE_SUBJECT_RE = %r{re: }i
+   FORUM_MESSAGE_SUBJECT_SPLIT = %r{(\[)(.*)( - )(.*)(\])}
    
    def dispatch
      if m = email.subject.match(ISSUE_REPLY_SUBJECT_RE)
        receive_issue_update(m[1].to_i)
+     elsif !email.subject.match(FORUM_MESSAGE_SUBJECT) && email.subject.match(/\[/)
+       if email.subject.match(FORUM_MESSAGE_SUBJECT_RE)
+         receive_forum_message_reply
+       else
+         receive_forum_message
+       end
      else
        receive_issue
      end
***************
*** 89,103 ****
      issue
    end
    
    def target_project
      # TODO: other ways to specify project:
      # * parse the email To field
      # * specific project (eg. Setting.mail_handler_target_project)
-     target = Project.find_by_identifier(get_keyword(:project))
      raise MissingInformation.new('Unable to determine target project') if target.nil?
      target
    end
    
    # Adds a note to an existing issue
    def receive_issue_update(issue_id)
      issue = Issue.find_by_id(issue_id)
--- 98,155 ----
      issue
    end
    
+   # Creates a new forum message
+   def receive_forum_message
+     project = target_project
+     board = target_board
+     # check permission
+     raise UnauthorizedAction unless user.allowed_to?(:edit_messages, project)
+     message = Message.new(:author => user, :board => board)
+     message.subject = email.subject.split(FORUM_MESSAGE_SUBJECT_SPLIT)[6].strip
+     message.content = email.plain_text_body.chomp
+     message.save!
+     logger.info "MailHandler: message ##{message.id} - #{message.subject} created by #{user}" if logger && logger.info
+     #Mailer.deliver_message_posted(message) if Setting.notified_events.include?('message_posted')
+     message
+   end
+    
+   # Creates a reply to an existing forum message
+   def receive_forum_message_reply
+     project = target_project
+     board = target_board
+     # check permission
+     raise UnauthorizedAction unless user.allowed_to?(:edit_messages, project)
+     message = Message.new(:author => user, :board => board)
+     subject = email.subject.split(FORUM_MESSAGE_SUBJECT_SPLIT)[6].gsub(FORUM_MESSAGE_SUBJECT_RE, "").strip
+     message.parent_id = Message.find(:first, 
+                                      :conditions => [ "board_id = ? AND subject = ?",
+                                      board, subject ],
+                                      :order => "created_on DESC").id
+     message.subject = "Re: " + subject
+     message.content = email.plain_text_body.chomp
+     message.save!
+     logger.info "MailHandler: message ##{message.id} - #{message.subject} created by #{user} in reply to message ##{message.parent_id}" if logger && logger.info
+     #Mailer.deliver_message_posted(message) if Setting.notified_events.include?('message_posted')
+     message
+   end
+   
    def target_project
      # TODO: other ways to specify project:
      # * parse the email To field
      # * specific project (eg. Setting.mail_handler_target_project)
+     unless target = Project.find_by_identifier(get_keyword(:project))
+       target = Project.find_by_name(email.subject.split(FORUM_MESSAGE_SUBJECT_SPLIT)[2])
+     end
      raise MissingInformation.new('Unable to determine target project') if target.nil?
      target
    end
    
+   def target_board
+     target = Board.find_by_name(email.subject.split(FORUM_MESSAGE_SUBJECT_SPLIT)[4].strip)
+     raise MissingInformation.new('Unable to determine target board/forum') if target.nil?
+     target
+   end
+   
    # Adds a note to an existing issue
    def receive_issue_update(issue_id)
      issue = Issue.find_by_id(issue_id)
